{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "z6UHmLYVhWAN"
   },
   "source": [
    "# Project 1: Digit Classification with KNN and Naive Bayes"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "03M_JSg3hWAO"
   },
   "source": [
    "In this project, you'll implement your own image recognition system for classifying digits. Read through the code and the instructions carefully and add your own code where indicated. Each problem can be addressed succinctly with the included packages -- please don't add any more. Grading will be based on writing clean, commented code, along with a few short answers.\n",
    "\n",
    "As always, you're welcome to work on the project in groups and discuss ideas on the course wall, but <b> please prepare your own write-up (with your own code). </b>\n",
    "\n",
    "If you're interested, check out these links related to digit recognition:\n",
    "\n",
    "* Yann Lecun's MNIST benchmarks: http://yann.lecun.com/exdb/mnist/\n",
    "* Stanford Streetview research and data: http://ufldl.stanford.edu/housenumbers/\n",
    "\n",
    "Finally, if you'd like to get started with Tensorflow, you can read through this tutorial: https://www.tensorflow.org/tutorials/keras/basic_classification. It uses a dataset called \"fashion_mnist\", which is identical in structure to the original digit mnist, but uses images of clothing rather than images of digits. The number of training examples and number of labels is the same. In fact, you can simply replace the code that loads \"fashion_mnist\" with \"mnist\" and everything should work fine."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "iJ9ayCvyhWAP"
   },
   "outputs": [],
   "source": [
    "# This tells matplotlib not to try opening a new window for each plot.\n",
    "%matplotlib inline\n",
    "\n",
    "# Import a bunch of libraries.\n",
    "import time\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from matplotlib.ticker import MultipleLocator\n",
    "from sklearn.pipeline import Pipeline\n",
    "from sklearn.datasets import fetch_openml\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "from sklearn.metrics import confusion_matrix\n",
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn.naive_bayes import BernoulliNB\n",
    "from sklearn.naive_bayes import MultinomialNB\n",
    "from sklearn.naive_bayes import GaussianNB\n",
    "from sklearn.model_selection import GridSearchCV\n",
    "from sklearn.metrics import classification_report\n",
    "from sklearn.metrics import accuracy_score\n",
    "import math\n",
    "\n",
    "# Set the randomizer seed so results are the same each time.\n",
    "np.random.seed(0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'0.21.3'"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import sklearn\n",
    "sklearn.__version__"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "sO1t0ypThWAR"
   },
   "source": [
    "Load the data. Notice that the data gets partitioned into training, development, and test sets. Also, a small subset of the training data called mini_train_data and mini_train_labels gets defined, which you should use in all the experiments below, unless otherwise noted."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "3yK9DacchWAS"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "data shape:  (70000, 784)\n",
      "label shape: (70000,)\n"
     ]
    }
   ],
   "source": [
    "# Load the digit data from https://www.openml.org/d/554 or from default local location '~/scikit_learn_data/...'\n",
    "X, Y = fetch_openml(name='mnist_784', return_X_y=True, cache=False)\n",
    "\n",
    "\n",
    "# Rescale grayscale values to [0,1].\n",
    "X = X / 255.0\n",
    "\n",
    "# Shuffle the input: create a random permutation of the integers between 0 and the number of data points and apply this\n",
    "# permutation to X and Y.\n",
    "# NOTE: Each time you run this cell, you'll re-shuffle the data, resulting in a different ordering.\n",
    "shuffle = np.random.permutation(np.arange(X.shape[0]))\n",
    "X, Y = X[shuffle], Y[shuffle]\n",
    "\n",
    "print('data shape: ', X.shape)\n",
    "print('label shape:', Y.shape)\n",
    "\n",
    "# Set some variables to hold test, dev, and training data.\n",
    "test_data, test_labels = X[61000:], Y[61000:]\n",
    "dev_data, dev_labels = X[60000:61000], Y[60000:61000]\n",
    "train_data, train_labels = X[:60000], Y[:60000]\n",
    "mini_train_data, mini_train_labels = X[:1000], Y[:1000]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "atc2JpWKhWAV"
   },
   "source": [
    "### Part 1:\n",
    "\n",
    "Show a 10x10 grid that visualizes 10 examples of each digit.\n",
    "\n",
    "Notes:\n",
    "* You can use `plt.rc()` for setting the colormap, for example to black and white.\n",
    "* You can use `plt.subplot()` for creating subplots.\n",
    "* You can use `plt.imshow()` for rendering a matrix.\n",
    "* You can use `np.array.reshape()` for reshaping a 1D feature vector into a 2D matrix (for rendering)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "436UeH7JhWAW",
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x720 with 100 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "def P1(num_examples=10):\n",
    "\n",
    "### STUDENT START ###\n",
    "    plt.rcParams['figure.figsize'] = [10.0, 10.0]\n",
    "    plt.figure()\n",
    "    plt.rc('gray')\n",
    "    \n",
    "    # display 10 examples each row for each digit\n",
    "    for i in range(10):\n",
    "        train_data_digit = train_data[train_labels==str(i)]\n",
    "        for j in range(num_examples):\n",
    "            train_data_img = np.reshape(train_data_digit[j],(-1,28))\n",
    "            \n",
    "            # set a 10x10 subplots with no x and y ticks\n",
    "            plt.subplot(10, 10, j+1+i*10)\n",
    "            plt.xticks([])\n",
    "            plt.yticks([])\n",
    "            plt.imshow(train_data_img, cmap='Greys')\n",
    "### STUDENT END ###\n",
    "\n",
    "P1(10)\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "EMQAHr7QhWAX"
   },
   "source": [
    "### Part 2:\n",
    "\n",
    "Produce k-Nearest Neighbors models with k $\\in$ [1,3,5,7,9].  Evaluate and show the accuracy of each model. For the 1-Nearest Neighbor model, additionally show the precision, recall, and F1 for each label. Which digit is the most difficult for the 1-Nearest Neighbor model to recognize?\n",
    "\n",
    "Notes:\n",
    "* Train on the mini train set.\n",
    "* Evaluate performance on the dev set.\n",
    "* You can use `KNeighborsClassifier` to produce a k-nearest neighbor model.\n",
    "* You can use `classification_report` to get precision, recall, and F1 results."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "-it5pn8-hWAY"
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Ambe Chen\\Anaconda3\\lib\\site-packages\\numpy\\lib\\arraysetops.py:565: FutureWarning: elementwise comparison failed; returning scalar instead, but in the future will perform elementwise comparison\n",
      "  mask &= (ar1 != a)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Results of Nearest-Neighbor model for k = 1\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.95      0.95      0.95       106\n",
      "           1       0.98      0.89      0.93       131\n",
      "           2       0.79      0.90      0.84        93\n",
      "           3       0.87      0.93      0.90        90\n",
      "           4       0.85      0.91      0.88        86\n",
      "           5       0.88      0.86      0.87        90\n",
      "           6       0.92      0.92      0.92       102\n",
      "           7       0.94      0.85      0.89       113\n",
      "           8       0.77      0.83      0.80        87\n",
      "           9       0.86      0.80      0.83       102\n",
      "\n",
      "   micro avg       0.88      0.88      0.88      1000\n",
      "   macro avg       0.88      0.88      0.88      1000\n",
      "weighted avg       0.89      0.88      0.88      1000\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Ambe Chen\\Anaconda3\\lib\\site-packages\\numpy\\lib\\arraysetops.py:565: FutureWarning: elementwise comparison failed; returning scalar instead, but in the future will perform elementwise comparison\n",
      "  mask &= (ar1 != a)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Results of Nearest-Neighbor model for k = 3\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.96      0.94      0.95       109\n",
      "           1       0.98      0.82      0.90       141\n",
      "           2       0.78      0.90      0.84        92\n",
      "           3       0.89      0.89      0.89        97\n",
      "           4       0.88      0.84      0.86        96\n",
      "           5       0.84      0.94      0.89        79\n",
      "           6       0.91      0.91      0.91       102\n",
      "           7       0.94      0.85      0.89       113\n",
      "           8       0.74      0.85      0.80        82\n",
      "           9       0.79      0.84      0.82        89\n",
      "\n",
      "   micro avg       0.88      0.88      0.88      1000\n",
      "   macro avg       0.87      0.88      0.87      1000\n",
      "weighted avg       0.88      0.88      0.88      1000\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Ambe Chen\\Anaconda3\\lib\\site-packages\\numpy\\lib\\arraysetops.py:565: FutureWarning: elementwise comparison failed; returning scalar instead, but in the future will perform elementwise comparison\n",
      "  mask &= (ar1 != a)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Results of Nearest-Neighbor model for k = 5\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.95      0.95      0.95       106\n",
      "           1       0.99      0.81      0.89       144\n",
      "           2       0.74      0.96      0.83        81\n",
      "           3       0.91      0.87      0.89       101\n",
      "           4       0.88      0.89      0.89        91\n",
      "           5       0.85      0.96      0.90        78\n",
      "           6       0.91      0.91      0.91       102\n",
      "           7       0.95      0.80      0.87       121\n",
      "           8       0.77      0.84      0.80        86\n",
      "           9       0.84      0.89      0.86        90\n",
      "\n",
      "   micro avg       0.88      0.88      0.88      1000\n",
      "   macro avg       0.88      0.89      0.88      1000\n",
      "weighted avg       0.89      0.88      0.88      1000\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Ambe Chen\\Anaconda3\\lib\\site-packages\\numpy\\lib\\arraysetops.py:565: FutureWarning: elementwise comparison failed; returning scalar instead, but in the future will perform elementwise comparison\n",
      "  mask &= (ar1 != a)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Results of Nearest-Neighbor model for k = 7\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.96      0.96      0.96       106\n",
      "           1       0.99      0.80      0.89       146\n",
      "           2       0.72      0.96      0.82        79\n",
      "           3       0.91      0.86      0.88       102\n",
      "           4       0.87      0.91      0.89        88\n",
      "           5       0.84      0.96      0.90        77\n",
      "           6       0.92      0.93      0.93       101\n",
      "           7       0.94      0.80      0.86       120\n",
      "           8       0.76      0.83      0.79        86\n",
      "           9       0.83      0.83      0.83        95\n",
      "\n",
      "   micro avg       0.88      0.88      0.88      1000\n",
      "   macro avg       0.87      0.88      0.88      1000\n",
      "weighted avg       0.89      0.88      0.88      1000\n",
      "\n",
      "Results of Nearest-Neighbor model for k = 9\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.95      0.96      0.96       105\n",
      "           1       0.99      0.78      0.87       150\n",
      "           2       0.69      0.97      0.81        75\n",
      "           3       0.91      0.87      0.89       101\n",
      "           4       0.87      0.92      0.89        87\n",
      "           5       0.85      0.96      0.90        78\n",
      "           6       0.92      0.91      0.92       103\n",
      "           7       0.94      0.80      0.86       120\n",
      "           8       0.78      0.82      0.80        89\n",
      "           9       0.82      0.85      0.83        92\n",
      "\n",
      "   micro avg       0.88      0.88      0.88      1000\n",
      "   macro avg       0.87      0.88      0.87      1000\n",
      "weighted avg       0.89      0.88      0.88      1000\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Ambe Chen\\Anaconda3\\lib\\site-packages\\numpy\\lib\\arraysetops.py:565: FutureWarning: elementwise comparison failed; returning scalar instead, but in the future will perform elementwise comparison\n",
      "  mask &= (ar1 != a)\n"
     ]
    }
   ],
   "source": [
    "def P2(k_values):\n",
    "\n",
    "### STUDENT START ###\n",
    "    # for each iteration, produce a k-nearest neighbor model and train it on the mini train set\n",
    "    for k in k_values:\n",
    "        neigh = KNeighborsClassifier(n_neighbors = k)\n",
    "        neigh.fit(mini_train_data, mini_train_labels)\n",
    "        result=classification_report(neigh.predict(dev_data),dev_labels,labels=list(range(10)))\n",
    "        print(\"Results of Nearest-Neighbor model for k =\",k)\n",
    "        print(result)\n",
    "### STUDENT END ###\n",
    "\n",
    "k_values = [1, 3, 5, 7, 9]\n",
    "P2(k_values)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "tZc9gzn5hWAZ"
   },
   "source": [
    "**ANSWER: According to the F1-scores, which is the weighted average of precision and recall, the most difficult digit for the 1-NN model to recognize is 8, with a F1-score of 0.8, the lowest amongst all digits.**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "7b6YEAzzhWAa"
   },
   "source": [
    "### Part 3:\n",
    "\n",
    "Produce 1-Nearest Neighbor models using training data of various sizes.  Evaluate and show the performance of each model.  Additionally, show the time needed to measure the performance of each model.\n",
    "\n",
    "Notes:\n",
    "* Train on subsets of the train set.  For each subset, take just the first part of the train set without re-ordering.\n",
    "* Evaluate on the dev set.\n",
    "* You can use `KNeighborsClassifier` to produce a k-nearest neighbor model.\n",
    "* You can use `time.time()` to measure elapsed time of operations."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "gEpNzDEjhWAa"
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Ambe Chen\\Anaconda3\\lib\\site-packages\\numpy\\lib\\arraysetops.py:565: FutureWarning: elementwise comparison failed; returning scalar instead, but in the future will perform elementwise comparison\n",
      "  mask &= (ar1 != a)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Results of 1-NN model for a training set of size 100\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.88      0.76      0.82       122\n",
      "           1       0.99      0.70      0.82       168\n",
      "           2       0.51      0.77      0.61        70\n",
      "           3       0.68      0.72      0.70        92\n",
      "           4       0.78      0.49      0.61       146\n",
      "           5       0.72      0.81      0.76        78\n",
      "           6       0.65      0.87      0.74        76\n",
      "           7       0.89      0.69      0.78       132\n",
      "           8       0.45      0.71      0.55        59\n",
      "           9       0.40      0.67      0.50        57\n",
      "\n",
      "   micro avg       0.70      0.70      0.70      1000\n",
      "   macro avg       0.69      0.72      0.69      1000\n",
      "weighted avg       0.76      0.70      0.71      1000\n",
      "\n",
      "The running time of 1-NN model operations for a training set of 100 is 0.14 seconds\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Ambe Chen\\Anaconda3\\lib\\site-packages\\numpy\\lib\\arraysetops.py:565: FutureWarning: elementwise comparison failed; returning scalar instead, but in the future will perform elementwise comparison\n",
      "  mask &= (ar1 != a)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Results of 1-NN model for a training set of size 200\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.86      0.88      0.87       103\n",
      "           1       0.99      0.78      0.87       150\n",
      "           2       0.58      0.86      0.70        72\n",
      "           3       0.81      0.79      0.80       100\n",
      "           4       0.79      0.65      0.71       113\n",
      "           5       0.78      0.79      0.79        87\n",
      "           6       0.83      0.91      0.87        93\n",
      "           7       0.89      0.75      0.82       121\n",
      "           8       0.63      0.75      0.68        79\n",
      "           9       0.68      0.79      0.73        82\n",
      "\n",
      "   micro avg       0.79      0.79      0.79      1000\n",
      "   macro avg       0.79      0.80      0.78      1000\n",
      "weighted avg       0.81      0.79      0.79      1000\n",
      "\n",
      "The running time of 1-NN model operations for a training set of 200 is 0.25 seconds\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Ambe Chen\\Anaconda3\\lib\\site-packages\\numpy\\lib\\arraysetops.py:565: FutureWarning: elementwise comparison failed; returning scalar instead, but in the future will perform elementwise comparison\n",
      "  mask &= (ar1 != a)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Results of 1-NN model for a training set of size 400\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.92      0.95      0.94       103\n",
      "           1       0.99      0.84      0.91       139\n",
      "           2       0.63      0.94      0.76        71\n",
      "           3       0.75      0.78      0.76        94\n",
      "           4       0.82      0.71      0.76       105\n",
      "           5       0.76      0.78      0.77        86\n",
      "           6       0.91      0.93      0.92       100\n",
      "           7       0.89      0.74      0.81       123\n",
      "           8       0.66      0.71      0.69        87\n",
      "           9       0.72      0.74      0.73        92\n",
      "\n",
      "   micro avg       0.81      0.81      0.81      1000\n",
      "   macro avg       0.81      0.81      0.80      1000\n",
      "weighted avg       0.82      0.81      0.81      1000\n",
      "\n",
      "The running time of 1-NN model operations for a training set of 400 is 0.47 seconds\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Ambe Chen\\Anaconda3\\lib\\site-packages\\numpy\\lib\\arraysetops.py:565: FutureWarning: elementwise comparison failed; returning scalar instead, but in the future will perform elementwise comparison\n",
      "  mask &= (ar1 != a)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Results of 1-NN model for a training set of size 800\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.94      0.93      0.94       107\n",
      "           1       0.98      0.89      0.94       130\n",
      "           2       0.77      0.92      0.84        89\n",
      "           3       0.82      0.89      0.86        90\n",
      "           4       0.79      0.89      0.84        82\n",
      "           5       0.84      0.80      0.82        92\n",
      "           6       0.92      0.91      0.92       103\n",
      "           7       0.94      0.82      0.88       117\n",
      "           8       0.78      0.84      0.81        87\n",
      "           9       0.82      0.76      0.79       103\n",
      "\n",
      "   micro avg       0.87      0.87      0.87      1000\n",
      "   macro avg       0.86      0.87      0.86      1000\n",
      "weighted avg       0.87      0.87      0.87      1000\n",
      "\n",
      "The running time of 1-NN model operations for a training set of 800 is 0.92 seconds\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Ambe Chen\\Anaconda3\\lib\\site-packages\\numpy\\lib\\arraysetops.py:565: FutureWarning: elementwise comparison failed; returning scalar instead, but in the future will perform elementwise comparison\n",
      "  mask &= (ar1 != a)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Results of 1-NN model for a training set of size 1600\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.96      0.95      0.96       107\n",
      "           1       0.98      0.93      0.95       125\n",
      "           2       0.84      0.93      0.88        96\n",
      "           3       0.86      0.94      0.90        88\n",
      "           4       0.86      0.95      0.90        83\n",
      "           5       0.88      0.86      0.87        90\n",
      "           6       0.93      0.93      0.93       102\n",
      "           7       0.97      0.88      0.92       113\n",
      "           8       0.83      0.85      0.84        92\n",
      "           9       0.92      0.84      0.87       104\n",
      "\n",
      "   micro avg       0.91      0.91      0.91      1000\n",
      "   macro avg       0.90      0.91      0.90      1000\n",
      "weighted avg       0.91      0.91      0.91      1000\n",
      "\n",
      "The running time of 1-NN model operations for a training set of 1600 is 1.82 seconds\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Ambe Chen\\Anaconda3\\lib\\site-packages\\numpy\\lib\\arraysetops.py:565: FutureWarning: elementwise comparison failed; returning scalar instead, but in the future will perform elementwise comparison\n",
      "  mask &= (ar1 != a)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Results of 1-NN model for a training set of size 3200\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.98      0.96      0.97       108\n",
      "           1       0.98      0.94      0.96       124\n",
      "           2       0.85      0.95      0.90        95\n",
      "           3       0.89      0.91      0.90        94\n",
      "           4       0.97      0.95      0.96        94\n",
      "           5       0.90      0.89      0.89        89\n",
      "           6       0.97      0.94      0.96       105\n",
      "           7       0.94      0.92      0.93       104\n",
      "           8       0.83      0.90      0.86        87\n",
      "           9       0.95      0.90      0.92       100\n",
      "\n",
      "   micro avg       0.93      0.93      0.93      1000\n",
      "   macro avg       0.93      0.93      0.92      1000\n",
      "weighted avg       0.93      0.93      0.93      1000\n",
      "\n",
      "The running time of 1-NN model operations for a training set of 3200 is 3.59 seconds\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Ambe Chen\\Anaconda3\\lib\\site-packages\\numpy\\lib\\arraysetops.py:565: FutureWarning: elementwise comparison failed; returning scalar instead, but in the future will perform elementwise comparison\n",
      "  mask &= (ar1 != a)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Results of 1-NN model for a training set of size 6400\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.97      0.97      0.97       106\n",
      "           1       1.00      0.95      0.98       124\n",
      "           2       0.92      0.97      0.95       101\n",
      "           3       0.91      0.92      0.91        96\n",
      "           4       0.96      0.93      0.94        95\n",
      "           5       0.92      0.93      0.93        87\n",
      "           6       0.97      0.93      0.95       106\n",
      "           7       0.96      0.92      0.94       106\n",
      "           8       0.83      0.94      0.88        83\n",
      "           9       0.93      0.92      0.92        96\n",
      "\n",
      "   micro avg       0.94      0.94      0.94      1000\n",
      "   macro avg       0.94      0.94      0.94      1000\n",
      "weighted avg       0.94      0.94      0.94      1000\n",
      "\n",
      "The running time of 1-NN model operations for a training set of 6400 is 7.24 seconds\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Ambe Chen\\Anaconda3\\lib\\site-packages\\numpy\\lib\\arraysetops.py:565: FutureWarning: elementwise comparison failed; returning scalar instead, but in the future will perform elementwise comparison\n",
      "  mask &= (ar1 != a)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Results of 1-NN model for a training set of size 12800\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.99      0.98      0.99       107\n",
      "           1       0.99      0.96      0.97       122\n",
      "           2       0.95      0.98      0.97       103\n",
      "           3       0.90      0.95      0.92        92\n",
      "           4       0.95      0.95      0.95        92\n",
      "           5       0.93      0.94      0.94        87\n",
      "           6       0.97      0.95      0.96       104\n",
      "           7       0.98      0.94      0.96       106\n",
      "           8       0.88      0.93      0.91        89\n",
      "           9       0.96      0.93      0.94        98\n",
      "\n",
      "   micro avg       0.95      0.95      0.95      1000\n",
      "   macro avg       0.95      0.95      0.95      1000\n",
      "weighted avg       0.95      0.95      0.95      1000\n",
      "\n",
      "The running time of 1-NN model operations for a training set of 12800 is 14.8 seconds\n",
      "Results of 1-NN model for a training set of size 25600\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.99      0.98      0.99       107\n",
      "           1       0.98      0.96      0.97       121\n",
      "           2       0.94      0.98      0.96       102\n",
      "           3       0.95      0.96      0.95        96\n",
      "           4       0.96      0.97      0.96        91\n",
      "           5       0.95      0.97      0.96        87\n",
      "           6       0.97      0.97      0.97       102\n",
      "           7       1.00      0.94      0.97       109\n",
      "           8       0.90      0.97      0.93        88\n",
      "           9       0.97      0.95      0.96        97\n",
      "\n",
      "   micro avg       0.96      0.96      0.96      1000\n",
      "   macro avg       0.96      0.96      0.96      1000\n",
      "weighted avg       0.96      0.96      0.96      1000\n",
      "\n",
      "The running time of 1-NN model operations for a training set of 25600 is 30.92 seconds\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Ambe Chen\\Anaconda3\\lib\\site-packages\\numpy\\lib\\arraysetops.py:565: FutureWarning: elementwise comparison failed; returning scalar instead, but in the future will perform elementwise comparison\n",
      "  mask &= (ar1 != a)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[0.702, 0.791, 0.811, 0.866, 0.905, 0.927, 0.939, 0.952, 0.963]"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def P3(train_sizes, accuracies):\n",
    "\n",
    "### STUDENT START ###\n",
    "    # Loop through the list of train sizes\n",
    "    # Each iteration i, train a 1-NN model on the subset data which contains the \n",
    "    # first x number of data within the train set, where X is the ith number in train_sizes.\n",
    "    for num in train_sizes:\n",
    "        start = time.time()\n",
    "        subset_data = train_data[:num]\n",
    "        subset_labels = train_labels[:num]\n",
    "        neigh = KNeighborsClassifier(n_neighbors = 1)\n",
    "        neigh.fit(subset_data, subset_labels)\n",
    "        \n",
    "        # Evaluate on the dev set\n",
    "        predicted = neigh.predict(dev_data)\n",
    "        result=classification_report(predicted,dev_labels,labels=list(range(10)))\n",
    "        \n",
    "        # Store accuracy into a list and capture the end time of the opreations\n",
    "        accuracy = accuracy_score(dev_labels, predicted, normalize=True)\n",
    "        accuracies.append(accuracy)\n",
    "        stop = time.time()\n",
    "        \n",
    "        print(\"Results of 1-NN model for a training set of size\", num)\n",
    "        print(result)\n",
    "\n",
    "        print(\"The running time of 1-NN model operations for a training set of\", num, \"is\", \n",
    "              round(stop - start,2), \"seconds\")\n",
    "    return accuracies\n",
    "### STUDENT END ###\n",
    "\n",
    "train_sizes = [100, 200, 400, 800, 1600, 3200, 6400, 12800, 25600]\n",
    "accuracies = []\n",
    "P3(train_sizes, accuracies)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "B56lVsKNhWAc"
   },
   "source": [
    "### Part 4:\n",
    "\n",
    "Produce a linear regression model that predicts accuracy of a 1-Nearest Neighbor model given training set size. Show $R^2$ of the linear regression model.  Show the accuracies predicted for training set sizes 60000, 120000, and 1000000.  Show a lineplot of actual accuracies and predicted accuracies vs. training set size over the range of training set sizes in the training data.  What's wrong with using linear regression here?\n",
    "\n",
    "Apply a transformation to the predictor features and a transformation to the outcome that make the predictions more reasonable.  Show $R^2$ of the improved linear regression model.  Show the accuracies predicted for training set sizes 60000, 120000, and 1000000.  Show a lineplot of actual accuracies and predicted accuracies vs. training set size over the range of training set sizes in the training data - be sure to display accuracies and training set sizes in appropriate units.\n",
    "\n",
    "Notes:\n",
    "* Train the linear regression models on all of the (transformed) accuracies estimated in Problem 3.\n",
    "* Evaluate the linear regression models on all of the (transformed) accuracies estimated in Problem 3.\n",
    "* You can use `LinearRegression` to produce a linear regression model.\n",
    "* Remember that the sklearn `fit()` functions take an input matrix X and output vector Y. So, each input example in X is a vector, even if it contains only a single value.\n",
    "* Hint re: predictor feature transform: Accuracy increases with training set size logarithmically.\n",
    "* Hint re: outcome transform: When y is a number in range 0 to 1, then odds(y)=y/(1-y) is a number in range 0 to infinity."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "def plt_acc(X, Y1, Y2, xlabel, ylabel, title):\n",
    "    # a plot helper function to plot the actual and predicted accuracies vs.\n",
    "    # training set size\n",
    "    plt.plot(X, Y1, label = \"true accuracy\")\n",
    "    plt.plot(X, Y2, label = \"predicted accuracy\")\n",
    "    plt.xlabel(xlabel)\n",
    "    plt.ylabel(ylabel)\n",
    "    plt.title(title)\n",
    "    plt.legend()\n",
    "    plt.show()\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "4xE_qIJghWAc"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The R^2 of the first model is 0.4177006634161019\n",
      "The predicted accuracies for training set sizes 60000, 120000, and 1000000 are\n",
      "[1.23617317 1.63742805 7.52249967]\n",
      "\n",
      "The R^2 of the first model is 0.9068304252436642\n",
      "The predicted accuracies for log of training set sizes 60000, 120000, and 1000000 are\n",
      "[1.03358792 1.06432125 1.15833125]\n",
      "\n",
      "The R^2 of the first model is 0.9395242859897991\n",
      "The predicted accuracy odds for log of training set sizes 60000, 120000, and 1000000 are\n",
      "[26.07837794 28.93291195 37.66462802]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "def P4():\n",
    "\n",
    "### STUDENT START ###\n",
    "    # Model 1: explanatory variable = training set sizes\n",
    "    # response variable = accuracies\n",
    "    X = np.array(train_sizes).reshape(-1,1)\n",
    "    Y = np.array(accuracies)\n",
    "    Mod1 = LinearRegression()\n",
    "    Mod1.fit(X, Y)\n",
    "    print(\"The R^2 of the first model is\", Mod1.score(X, Y))\n",
    "    print(\"The predicted accuracies for training set sizes 60000, 120000, and 1000000 are\")\n",
    "    print(Mod1.predict(np.array([60000, 120000, 1000000]).reshape(-1,1)))\n",
    "    \n",
    "    # Model 2: explanatory variable = log(training set sizes)\n",
    "    # response variable = accuracies\n",
    "    Mod2 = LinearRegression()\n",
    "    Mod2.fit(np.log(X), Y)\n",
    "    print(\"\\nThe R^2 of the first model is\", Mod2.score(np.log(X), Y))\n",
    "    print(\"The predicted accuracies for log of training set sizes 60000, 120000, and 1000000 are\")\n",
    "    print(Mod2.predict(np.array(np.log([60000, 120000, 1000000])).reshape(-1,1)))\n",
    "    \n",
    "    # Model 1: explanatory variable = log(training set sizes)\n",
    "    # response variable = accuracy odds\n",
    "    transY = Y/(1-Y)\n",
    "    Mod3 = LinearRegression()\n",
    "    Mod3.fit(np.log(X),transY)\n",
    "    pred3 = Mod3.predict(np.array(np.log([60000, 120000, 1000000])).reshape(-1,1))\n",
    "    print(\"\\nThe R^2 of the first model is\", Mod3.score(np.log(X),transY))\n",
    "    print(\"The predicted accuracy odds for log of training set sizes 60000, 120000, and 1000000 are\")\n",
    "    print(pred3)\n",
    "    \n",
    "    plt.figure()\n",
    "    plt_acc(X, Y, Mod1.predict(X), \"training size\", \"accuracy\", \"Linear Regression of Training Size vs Accuracy\")\n",
    "    plt_acc(np.log(X), Y, Mod2.predict(np.log(X)), \"log training size\", \"accuracy\", \n",
    "            \"Linear Regression with Log Transformation on Training Size vs Accuracy\")\n",
    "    plt_acc(np.log(X), transY, Mod3.predict(np.log(X)),\"log training size\", \"accuracy odds\", \n",
    "            \"Linear Regression with Log Training Size vs Accuracy Odds\")\n",
    "\n",
    "### STUDENT END ###\n",
    "\n",
    "P4()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "HYYYL9cGhWAe"
   },
   "source": [
    "**ANSWER: A simple linear regression on accuracy vs training set sizes is wrong because it ignores the domain restrictions of the outcome variables, accuracy ratios. By definition, the accuracy ratios range from 0 to 1. However, the outcome of the model have no range restriction; for example, for a training set size of 60000, the model predicts an accuracy of 1.24, which is not possible in reality. In order to correct this, We apply the transformation on the explanatory variable. First, we apply the log transformation on the training set size and run linear regression on this transformed variable vs accuracies. The second model has a better R^2 of 0.90 than model 1, but still does not restrict the range of the response variable. By transforming the outcome variable to odds ratio, we can free up the range of the outcome variable. Hence, we run model 3 on accuracy odds vs log training size. The model 3 has a R^2 of 0.94, which is the highest amongst three models. Using model 3, we predict the accuracy odds to be 26.08 for a training size of 60000, 28.93 for a training size of 120000, and 37.66 for a training size of 1000000. The intepretation of the accuracy odds is that the 1-NN model can accurately predict about 26 out of 27 digits for a training size of 60000.**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "geAQJjGRhWAe"
   },
   "source": [
    "### Part 5:\n",
    "\n",
    "Produce a 1-Nearest Neighbor model and show the confusion matrix. Which pair of digits does the model confuse most often? Show the images of these most often confused digits.\n",
    "\n",
    "Notes:\n",
    "- Train on the mini train set.\n",
    "- Evaluate performance on the dev set.\n",
    "- You can use `confusion_matrix()` to produce a confusion matrix."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "Bq36xaQohWAf"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The performance of the 1-NN model on the dev data set:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.95      0.95      0.95       106\n",
      "           1       0.98      0.89      0.93       131\n",
      "           2       0.79      0.90      0.84        93\n",
      "           3       0.87      0.93      0.90        90\n",
      "           4       0.85      0.91      0.88        86\n",
      "           5       0.88      0.86      0.87        90\n",
      "           6       0.92      0.92      0.92       102\n",
      "           7       0.94      0.85      0.89       113\n",
      "           8       0.77      0.83      0.80        87\n",
      "           9       0.86      0.80      0.83       102\n",
      "\n",
      "   micro avg       0.88      0.88      0.88      1000\n",
      "   macro avg       0.88      0.88      0.88      1000\n",
      "weighted avg       0.89      0.88      0.88      1000\n",
      "\n",
      "The confusion matrix of the 1-NN model on the dev data set:\n",
      "[[101   0   1   0   0   0   1   1   2   0]\n",
      " [  0 116   1   0   0   0   0   0   1   0]\n",
      " [  1   4  84   2   2   0   2   4   6   1]\n",
      " [  0   2   0  84   0   6   0   2   3   0]\n",
      " [  0   0   1   0  78   0   0   2   0  11]\n",
      " [  2   0   0   1   1  77   5   0   2   0]\n",
      " [  1   2   1   0   1   2  94   0   1   0]\n",
      " [  0   1   1   0   0   0   0  96   0   4]\n",
      " [  1   5   4   3   1   3   0   1  72   4]\n",
      " [  0   1   0   0   3   2   0   7   0  82]]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Ambe Chen\\Anaconda3\\lib\\site-packages\\numpy\\lib\\arraysetops.py:565: FutureWarning: elementwise comparison failed; returning scalar instead, but in the future will perform elementwise comparison\n",
      "  mask &= (ar1 != a)\n"
     ]
    }
   ],
   "source": [
    "def P5():\n",
    "\n",
    "### STUDENT START ###\n",
    "    neigh = KNeighborsClassifier(n_neighbors = 1)\n",
    "    neigh.fit(mini_train_data, mini_train_labels)\n",
    "    predicted = neigh.predict(dev_data)\n",
    "    result=classification_report(predicted,dev_labels,labels=list(range(10)))\n",
    "    print(\"The performance of the 1-NN model on the dev data set:\")\n",
    "    print(result)\n",
    "    print(\"The confusion matrix of the 1-NN model on the dev data set:\")\n",
    "    print(confusion_matrix(dev_labels, predicted, labels=list(map(str, range(10)))))\n",
    "    return neigh\n",
    "### STUDENT END ###\n",
    "\n",
    "model = P5()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "11\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 1152x144 with 11 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "def P5_showimg(y_pred, y_true):\n",
    "    mistakes = dev_data[np.logical_and(model.predict(dev_data)==str(y_pred), dev_labels==str(y_true))]\n",
    "    print(len(mistakes))\n",
    "    plt.rcParams['figure.figsize'] = [16.0, 2.0]\n",
    "    plt.figure()\n",
    "    plt.rc('gray')\n",
    "    for i in range(len(mistakes)):\n",
    "        mis_img = np.reshape(mistakes[i],(-1,28))\n",
    "        plt.subplot(1, len(mistakes), i+1)\n",
    "        plt.xticks([])\n",
    "        plt.yticks([])\n",
    "        plt.imshow(mis_img, cmap='Greys')\n",
    "        \n",
    "P5_showimg(9, 4)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**ANSWER: The model confuses the most often (11 times) on the (4, 9) pair where the actual value is 4 and the predicted value is 9.**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "tgqMKb-hhWAh"
   },
   "source": [
    "### Part 6:\n",
    "\n",
    "A common image processing technique is to smooth an image by blurring. The idea is that the value of a particular pixel is estimated as the weighted combination of the original value and the values around it. Typically, the blurring is Gaussian, i.e., the weight of a pixel's influence is determined by a Gaussian function over the distance to the relevant pixel.\n",
    "\n",
    "Implement a simplified Gaussian blur filter by just using the 8 neighboring pixels like this: the smoothed value of a pixel is a weighted combination of the original value and the 8 neighboring values.\n",
    "\n",
    "Pick a weight, then produce and evaluate four 1-Nearest Neighbor models by applying your blur filter in these ways:\n",
    "- Do not use the filter\n",
    "- Filter the training data but not the dev data\n",
    "- Filter the dev data but not the training data\n",
    "- Filter both training data and dev data\n",
    "\n",
    "Show the accuracies of the four models evaluated as described.  Try to pick a weight that makes one model's accuracy at least 0.9.\n",
    "\n",
    "Notes:\n",
    "* Train on the (filtered) mini train set.\n",
    "* Evaluate performance on the (filtered) dev set.\n",
    "* There are other Guassian blur filters available, for example in `scipy.ndimage.filters`. You are welcome to experiment with those, but you are likely to get the best results with the simplified version described above."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "lSKHmHGshWAi"
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 360x216 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model 1 has an accuracy of 0.884\n",
      "Model 2 has an accuracy of 0.907\n",
      "Model 3 has an accuracy of 0.868\n",
      "Model 4 has an accuracy of 0.905\n"
     ]
    }
   ],
   "source": [
    "def wgt_surrounding(grid, idx, edge_len):\n",
    "    \n",
    "    # the function finds the 8 neighbour values of each pixel and weight them equally\n",
    "    surrounding = np.zeros(9)\n",
    "    pixel_grid = np.reshape(grid,(-1,edge_len))\n",
    "    x =  idx // edge_len     # row index\n",
    "    y =  idx % edge_len      # column index\n",
    "    wgt_factor = 1/9         # equally weight the original value and the 8 neighbour values\n",
    "    \n",
    "    # Find values in adjacent up, down, left and right pixels\n",
    "    if x > 0:\n",
    "        surrounding[1] = pixel_grid[x-1][y]\n",
    "    if x < edge_len - 1:\n",
    "        surrounding[7] = pixel_grid[x+1][y]\n",
    "    if y > 0:\n",
    "        surrounding[3] = pixel_grid[x][y-1]\n",
    "    if y < edge_len - 1:\n",
    "        surrounding[5] = pixel_grid[x][y+1]\n",
    "        \n",
    "    # Find four adjacent diagonal pixel values\n",
    "    if x > 0 and y > 0:\n",
    "        surrounding[0] = pixel_grid[x-1][y-1]\n",
    "    if x > 0 and y < edge_len - 1:\n",
    "        surrounding[2] = pixel_grid[x-1][y+1]\n",
    "    if x < edge_len - 1 and y > 0:\n",
    "        surrounding[6] = pixel_grid[x+1][y-1]\n",
    "    if x < edge_len - 1 and y < edge_len - 1:\n",
    "        surrounding[8] = pixel_grid[x+1][y+1]\n",
    "        \n",
    "    surrounding[4] = pixel_grid[x][y]\n",
    "    surrounding = surrounding * wgt_factor\n",
    "    \n",
    "    return surrounding\n",
    " \n",
    "def blur(img):\n",
    "    \n",
    "    # the function blurs an image by summing the weighted combinaion of the original\n",
    "    # value and the 8 neighbour values for each of 28x28 pixels\n",
    "    blurred_img = np.zeros(len(np.array(img)))\n",
    "    for i in range(len(np.array(img))):\n",
    "        avg = sum(wgt_surrounding(img, i, 28))\n",
    "        blurred_img[i] = avg\n",
    "    return blurred_img\n",
    "\n",
    "# test the blur functions \n",
    "plt.figure(figsize=(5, 3))\n",
    "plt.subplot(1, 2, 1)\n",
    "plt.xticks([])\n",
    "plt.yticks([])\n",
    "plt.imshow(mini_train_data[4].reshape(-1, 28), cmap='Greys')\n",
    "\n",
    "plt.subplot(1, 2, 2)\n",
    "plt.imshow(blur(mini_train_data[4]).reshape(-1, 28), cmap='Greys')\n",
    "plt.xticks([])\n",
    "plt.yticks([])\n",
    "plt.show()\n",
    "\n",
    "def blur_set(data_set):\n",
    "    \n",
    "    # The function applies blur function to a data set\n",
    "    filtered_data_set = np.array(data_set)\n",
    "    for i, val in enumerate(data_set):\n",
    "        filtered_data_set[i] = blur(val)\n",
    "    return filtered_data_set\n",
    "\n",
    "def P6():\n",
    "    \n",
    "### STUDENT START ###\n",
    "    filtered_train_data = blur_set(mini_train_data)\n",
    "    filtered_dev_data = blur_set(dev_data)\n",
    "    \n",
    "    # model 1: no filter\n",
    "    model1 = KNeighborsClassifier(n_neighbors = 1)\n",
    "    model1.fit(mini_train_data, mini_train_labels)\n",
    "    print(\"Model 1 has an accuracy of\", accuracy_score(dev_labels, model1.predict(dev_data), normalize=True))\n",
    "    \n",
    "    # model 2: Filter the training data but not the dev data\n",
    "    model2 = KNeighborsClassifier(n_neighbors = 1)\n",
    "    model2.fit(filtered_train_data, mini_train_labels)\n",
    "    print(\"Model 2 has an accuracy of\", accuracy_score(dev_labels, model2.predict(dev_data), normalize=True))\n",
    "    \n",
    "    # model 3: Filter the dev data but not the training data\n",
    "    model3 = KNeighborsClassifier(n_neighbors = 1)\n",
    "    model3.fit(mini_train_data, mini_train_labels)\n",
    "    print(\"Model 3 has an accuracy of\", accuracy_score(dev_labels, model3.predict(filtered_dev_data), normalize=True))\n",
    "    \n",
    "    # model 4: Filter both training data and dev data\n",
    "    model4 = KNeighborsClassifier(n_neighbors = 1)\n",
    "    model4.fit(filtered_train_data, mini_train_labels)\n",
    "    print(\"Model 4 has an accuracy of\", accuracy_score(dev_labels, model4.predict(filtered_dev_data), normalize=True))\n",
    "\n",
    "### STUDENT END ###\n",
    "\n",
    "P6()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Answer: The simplified Guassian blur filter is built using the method of equally-weighted combination of the original pixel and its eight nearest neighbours. Model 2 delivers the highest accuracy on the dev data set by applying the blur filter to the mini training set but not to the dev set. The accuracy improved slightly by filtering the training data set only, or both the training and dev data sets at the same time.**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "LtgepWfAhWAk"
   },
   "source": [
    "### Part 7:\n",
    "\n",
    "Produce two Naive Bayes models and evaluate their performances.  Recall that Naive Bayes estimates P(feature|label), where each label is a categorical, not a real number.\n",
    "\n",
    "For the first model, map pixel values to either 0 or 1, representing white or black - you should pre-process the data or use `BernoulliNB`'s `binarize` parameter to set the white/black separation threshold to 0.1.  Use `BernoulliNB` to produce the model.\n",
    "\n",
    "For the second model, map pixel values to either 0, 1, or 2, representing white, gray, or black - you should pre-process the data, seting the white/gray/black separation thresholds to 0.1 and 0.9.  Use `MultinomialNB` to produce the model. \n",
    "\n",
    "Show the Bernoulli model accuracy and the Multinomial model accuracy.\n",
    "\n",
    "Notes:\n",
    "* Train on the mini train set.\n",
    "* Evaluate performance on the dev set.\n",
    "* `sklearn`'s Naive Bayes methods can handle real numbers, but for this exercise explicitly do the mapping to categoricals. \n",
    "\n",
    "Does the multinomial version improve the results? Why or why not?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "eGpH-4IQhWAk"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The Bernoulli Naive Bayes model has an accuracy of 0.814\n",
      "The Multinomial Naive Bayes model has an accuracy of 0.807\n"
     ]
    }
   ],
   "source": [
    "def P7():\n",
    "\n",
    "### STUDENT START ###\n",
    "    # Bernoulli Naive Bayes Model with binarize parameter 0.1\n",
    "    model1 = BernoulliNB(binarize = 0.1)\n",
    "    model1.fit(mini_train_data,mini_train_labels)\n",
    "    print(\"The Bernoulli Naive Bayes model has an accuracy of\", \n",
    "          accuracy_score(dev_labels, model1.predict(dev_data), normalize=True))\n",
    "    \n",
    "    # transform pixel values to 0, 1, or 2 by setting the white/gray/black separation threshold to 0.1 and 0.9\n",
    "    vector_int=np.vectorize(int)\n",
    "    processed_train_data = vector_int(mini_train_data>=0.1)+vector_int(mini_train_data>=0.9)\n",
    "    processed_dev_data = vector_int(dev_data>=0.1)+vector_int(dev_data>=0.9)\n",
    "    \n",
    "    # Multinomial Naive Bayes model with processed data that have pixel values mapped to either 0,1, or 2\n",
    "    model2 = MultinomialNB()\n",
    "    model2.fit(processed_train_data,mini_train_labels)\n",
    "    print(\"The Multinomial Naive Bayes model has an accuracy of\", \n",
    "          accuracy_score(dev_labels, model2.predict(processed_dev_data), normalize=True))\n",
    "    \n",
    "### STUDENT END ###\n",
    "\n",
    "P7()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "zNLrgggohWAm"
   },
   "source": [
    "**ANSWER: the Multinomial Naive Bayes model does not improve the results, and its accuracy is even slightly lower than that of the Bernoulli model. This is because the categorizing process done prior to the multinomial model fitting acts like a blur filter but the threholds for defining pixels to be grey are arbitrary and can be adjusted to improve the model accuracy. In addition, the grey threshold violates the independence assumption of the Naive Bayes model. In the Bernoulli model where there is only a feature of white pixel and a feature of black pixel, the two features are independent of each other. However, the Multinomial model has an additional grey feature which is defined based on the area of black hand-writing in a pixel. Hence the grey and black features are correlated.**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "PqjbRLg7hWAm"
   },
   "source": [
    "### Part 8:\n",
    "\n",
    "Search across several values of the LaPlace smoothing parameter (alpha) to find its effect on a Bernoulli Naive Bayes model's performance.  Show the accuracy at each alpha value.\n",
    "\n",
    "Notes:\n",
    "* Set binarization threshold to 0.\n",
    "* Train on the mini train set.\n",
    "* Evaluate performance by 5-fold cross-validation. \n",
    "* Use `GridSearchCV(..., ..., cv=..., scoring='accuracy', iid=False)` to vary alpha and evaluate performance by cross-validation.\n",
    "* Cross-validation is based on partitions of the training data, so results will be a bit different than if you had used the dev set to evaluate performance.\n",
    "\n",
    "What is the best value for alpha? What is the accuracy when alpha is near 0? Is this what you'd expect?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "0AvZ-Wp3hWAn"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Alpha: {'alpha': 1e-10}; Accuracy: 0.812702\n",
      "\n",
      "Alpha: {'alpha': 0.0001}; Accuracy: 0.820818\n",
      "\n",
      "Alpha: {'alpha': 0.001}; Accuracy: 0.824850\n",
      "\n",
      "Alpha: {'alpha': 0.01}; Accuracy: 0.819848\n",
      "\n",
      "Alpha: {'alpha': 0.1}; Accuracy: 0.817818\n",
      "\n",
      "Alpha: {'alpha': 0.5}; Accuracy: 0.815816\n",
      "\n",
      "Alpha: {'alpha': 1.0}; Accuracy: 0.810779\n",
      "\n",
      "Alpha: {'alpha': 2.0}; Accuracy: 0.804802\n",
      "\n",
      "Alpha: {'alpha': 10.0}; Accuracy: 0.780584\n",
      "\n",
      "Best alpha =  {'alpha': 0.001}\n"
     ]
    }
   ],
   "source": [
    "def P8(alphas):\n",
    "\n",
    "### STUDENT START ###\n",
    "    BNB = BernoulliNB(binarize = 0.0)\n",
    "    clf = GridSearchCV(BNB, alphas, cv=5, scoring='accuracy', iid=False) \n",
    "    clf.fit(mini_train_data,mini_train_labels)\n",
    "    return clf\n",
    "\n",
    "### STUDENT END ###\n",
    "\n",
    "alphas = {'alpha': [1.0e-10, 0.0001, 0.001, 0.01, 0.1, 0.5, 1.0, 2.0, 10.0]}\n",
    "nb = P8(alphas)\n",
    "for params, score in zip(nb.cv_results_['params'], nb.cv_results_['mean_test_score']):\n",
    "    print(\"\\nAlpha: %r; Accuracy: %f\" % (params, score))\n",
    "    \n",
    "print()\n",
    "print(\"Best alpha = \", nb.best_params_)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "1yEg9keThWAp"
   },
   "source": [
    "**ANSWER: The best value is 0.001 for alpha. When alpha is near 0, the accuracy is 0.812702. By increasing the value of alpha, we introduce a smoothing parameter to the Bernoulli model in order to address situations of 0 occurence of some feature in the training set. However, the model loses accuracy when we introduce too much smoothing.**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "B07GDiDdhWAq"
   },
   "source": [
    "### Part 9:\n",
    "\n",
    "Produce a model using Guassian Naive Bayes, which is intended for real-valued features, and evaluate performance. You will notice that it does not work so well. Diagnose the problem and apply a simple fix so that the model accuracy is around the same as for a Bernoulli Naive Bayes model. Show the model accuracy before your fix and the model accuracy after your fix.  Explain your solution.\n",
    "\n",
    "Notes:\n",
    "* Train on the mini train set.\n",
    "* Evaluate performance on the dev set.\n",
    "* Consider the effects of theta and sigma.  These are stored in the model's `theta_` and `sigma_` attributes."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "gBLbTMWChWAq"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy of Guassian Naive Bayes model: 0.593\n",
      "Mean of thetas of all features: 0.1323391723061708\n",
      "Thetas range from 0.0 to 0.9612336601307193\n",
      "Mean of sigmas of all features: 0.05299707504881932\n",
      "Sigmas range from 2.0143330705113426e-10 to 0.21206426868524297\n",
      "Accuracy of Guassian Naive Bayes model after normalization: 0.704\n",
      "Accuracy of Guassian Naive Bayes model after adding random noise: 0.802\n",
      "Accuracy of Guassian Naive Bayes model after normalization and adding random noise: 0.549\n"
     ]
    }
   ],
   "source": [
    "from scipy.stats import norm\n",
    "from sklearn.preprocessing import scale\n",
    "\n",
    "def P9():\n",
    "\n",
    "### STUDENT END ###\n",
    "    clf = GaussianNB()\n",
    "    clf.fit(mini_train_data,mini_train_labels)\n",
    "    print(\"Accuracy of Guassian Naive Bayes model:\", clf.score(dev_data, dev_labels))\n",
    "    print(\"Mean of thetas of all features:\", np.mean(clf.theta_))\n",
    "    print(\"Thetas range from\", np.min(clf.theta_), \"to\", np.max(clf.theta_))\n",
    "    print(\"Mean of sigmas of all features:\", np.mean(clf.sigma_))\n",
    "    print(\"Sigmas range from\", np.min(clf.sigma_), \"to\", np.max(clf.sigma_))\n",
    "    \n",
    "    # Add random noise to the mini training data and dev data\n",
    "    noise_train = norm.rvs(np.mean(clf.theta_), np.mean(clf.sigma_), size=np.shape(mini_train_data))\n",
    "    noise_dev = norm.rvs(np.mean(clf.theta_), np.mean(clf.sigma_), size=np.shape(dev_data))\n",
    "    noise_train_data = mini_train_data + noise_train\n",
    "    noise_dev_data =dev_data + noise_dev\n",
    "    \n",
    "    # Rescale the training and dev sets to Guassian distribution\n",
    "    scaled_train_data = np.zeros(np.shape(mini_train_data))\n",
    "    scaled_dev_data = np.zeros(np.shape(dev_data))\n",
    "    for i in range(np.shape(mini_train_data)[0]):\n",
    "        scaled_train_data[i] = scale(mini_train_data[i])\n",
    "    for i in range(np.shape(dev_data)[0]):\n",
    "        scaled_dev_data[i] = scale(dev_data[i])\n",
    "    \n",
    "    # Apply both normalization and random noise to the training and dev sets\n",
    "    normalized_train_data = mini_train_data + norm.rvs(size=np.shape(mini_train_data))\n",
    "    normalized_dev_data =dev_data + norm.rvs(size=np.shape(dev_data))\n",
    "    \n",
    "    # train and test on rescaled data\n",
    "    clf.fit(scaled_train_data,mini_train_labels)\n",
    "    print(\"Accuracy of Guassian Naive Bayes model after normalization:\", clf.score(scaled_dev_data, dev_labels))\n",
    "    \n",
    "    # train and test on data with random noise\n",
    "    clf.fit(noise_train_data,mini_train_labels)\n",
    "    print(\"Accuracy of Guassian Naive Bayes model after adding random noise:\", clf.score(noise_dev_data, dev_labels))\n",
    "    \n",
    "    # train and test on normalized data\n",
    "    clf.fit(normalized_train_data,mini_train_labels)\n",
    "    print(\"Accuracy of Guassian Naive Bayes model after normalization and adding random noise:\", clf.score(normalized_dev_data, dev_labels))\n",
    "    \n",
    "### STUDENT END ###\n",
    "\n",
    "P9()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "1SyHTEJohWAt"
   },
   "source": [
    "**ANSWER: The Guassian Naive Bayes model did not perform well because features do not follow a Normal distribution and the training data set is small. According to Central Limit Theorem, features would follow a Normal distribution if the data set is large enough. Hence, we can possibly fix the issue by normalizing both the training and dev sets and/or adding random noise which follows a Guassian distribution. From the accuracy scores of the 3 models, we can see that adding random noise helps the model deliver the best performance on the dev data set.**\n",
    "\n",
    "**Normalization delivers suboptimal results in this case because it is not a required step to perform as we are only comparing the features with each other but do not care about knowing which class the features most likely belongs to.**\n",
    "\n",
    "**Adding random noise also helps normalize the data sets and it efficiently reduces overfitting and generalization error when the training set is small. Hence it is the best solution to fix the issue in our case.**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "dgZMuc1VhWAt"
   },
   "source": [
    "### Part 10:\n",
    "\n",
    "Because Naive Bayes produces a generative model, you can use it to generate digit images.\n",
    "\n",
    "Produce a Bernoulli Naive Bayes model and then use it to generate a 10x20 grid with 20 example images of each digit. Each pixel output should be either 0 or 1, based on comparing some randomly generated number to the estimated probability of the pixel being either 0 or 1.  Show the grid.\n",
    "\n",
    "Notes:\n",
    "* You can use np.random.rand() to generate random numbers from a uniform distribution.\n",
    "* The estimated probability of each pixel being 0 or 1 is stored in the model's `feature_log_prob_` attribute. You can use `np.exp()` to convert a log probability back to a probability.\n",
    "\n",
    "How do the generated digit images compare to the training digit images?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "ktii-Mp-hWAu"
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 2160x1800 with 200 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "def P10(num_examples):\n",
    "\n",
    "### STUDENT START ###\n",
    "    clf = BernoulliNB(alpha = 0.001, binarize = 0.0)\n",
    "    clf.fit(mini_train_data, mini_train_labels)\n",
    "    \n",
    "    digit_prob = np.exp(clf.feature_log_prob_)\n",
    "    num_digits = np.shape(clf.feature_log_prob_)[0]\n",
    "    num_pixel = np.shape(clf.feature_log_prob_)[1]\n",
    "    \n",
    "    plt.figure(figsize = (30, 25))\n",
    "    for i in range(num_digits): \n",
    "        for j in range(num_examples):\n",
    "            # Binarize each pixel based on comparing randomly generated numbers to the\n",
    "            # the estimated probability of the pixels\n",
    "            rand_uni = np.random.rand(num_pixel)\n",
    "            pixel_binary = np.where(digit_prob[i] > rand_uni, 1, 0)\n",
    "            image = np.reshape(pixel_binary,(-1,28))\n",
    "            plt.subplot(num_digits, num_examples, j+1+i*num_examples)\n",
    "            plt.xticks([])\n",
    "            plt.yticks([])\n",
    "            plt.imshow(image, cmap='Greys')\n",
    "\n",
    "### STUDENT END ###\n",
    "\n",
    "P10(20)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "SuQd1fTGhWAw"
   },
   "source": [
    "**ANSWER: the generated data are readable but less recognizable than the training data. In most of the images, most of the black pixels forms digits in a hand-writing fashion but few black pixels randomly and sparsely distributed around the digits. This can be improved by slightly increasing the binarization threshold to reduce the chances of that pixels with a little of the digit edges being classified as a true black pixel.**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "ksHMg73uhWAx"
   },
   "source": [
    "### Part 11:\n",
    "\n",
    "Recall that a strongly calibrated classifier is rougly 90% accurate when the posterior probability of the predicted class is 0.9. A weakly calibrated classifier is more accurate when the posterior probability of the predicted class is 90% than when it is 80%. A poorly calibrated classifier has no positive correlation between posterior probability and accuracy.  \n",
    "\n",
    "Produce a Bernoulli Naive Bayes model.  Evaluate performance: partition the dev set into several buckets based on the posterior probabilities of the predicted classes - think of a bin in a histogram- and then estimate the accuracy for each bucket. So, for each prediction, find the bucket to which the maximum posterior probability belongs, and update \"correct\" and \"total\" counters accordingly.  Show the accuracy for each bucket.\n",
    "\n",
    "Notes:\n",
    "* Set LaPlace smoothing (alpha) to the optimal value (from part 8).\n",
    "* Set binarization threshold to 0.\n",
    "* Train on the mini train set.\n",
    "* Evaluate perfromance on the dev set.\n",
    "\n",
    "How would you characterize the calibration for this Bernoulli Naive Bayes model?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "a1N-St12hWAy"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "p(pred) is 0.0000000000000 to 0.5000000000000    total =   0  accuracy = 0.000\n",
      "p(pred) is 0.5000000000000 to 0.9000000000000    total =  31  accuracy = 0.355\n",
      "p(pred) is 0.9000000000000 to 0.9990000000000    total =  67  accuracy = 0.433\n",
      "p(pred) is 0.9990000000000 to 0.9999900000000    total =  59  accuracy = 0.458\n",
      "p(pred) is 0.9999900000000 to 0.9999999000000    total =  46  accuracy = 0.652\n",
      "p(pred) is 0.9999999000000 to 0.9999999990000    total =  62  accuracy = 0.774\n",
      "p(pred) is 0.9999999990000 to 0.9999999999900    total =  33  accuracy = 0.788\n",
      "p(pred) is 0.9999999999900 to 0.9999999999999    total =  43  accuracy = 0.791\n",
      "p(pred) is 0.9999999999999 to 1.0000000000000    total = 659  accuracy = 0.938\n"
     ]
    }
   ],
   "source": [
    "def P11(buckets, correct, total):\n",
    "    \n",
    "### STUDENT START ###\n",
    "    clf = BernoulliNB(alpha = 0.001, binarize = 0.0)\n",
    "    clf.fit(mini_train_data, mini_train_labels)\n",
    "    pred_val = clf.predict(dev_data)\n",
    "    pred_prob = clf.predict_proba(dev_data)\n",
    "    \n",
    "    prev_bucket = 0\n",
    "    for i, bucket in enumerate(buckets):\n",
    "        for value, prob, label in zip(pred_val, pred_prob, dev_labels):\n",
    "            # an indicator variable: 1 if the max probability in in the current bin\n",
    "            is_in_bucket = 1 if max(prob) > prev_bucket and max(prob) <= bucket else 0\n",
    "            total[i] += is_in_bucket\n",
    "            \n",
    "            # an indicator variable: 1 if the value is labelled correctly and the max\n",
    "            # probability is in the current bin\n",
    "            is_correct = 1 if value == label and is_in_bucket == 1 else 0\n",
    "            correct[i] += is_correct\n",
    "\n",
    "        prev_bucket = bucket\n",
    "                \n",
    "### STUDENT END ###\n",
    "\n",
    "buckets = [0.5, 0.9, 0.999, 0.99999, 0.9999999, 0.999999999, 0.99999999999, 0.9999999999999, 1.0]\n",
    "correct = [0 for i in buckets]\n",
    "total = [0 for i in buckets]\n",
    "\n",
    "P11(buckets, correct, total)\n",
    "\n",
    "for i in range(len(buckets)):\n",
    "    accuracy = 0.0\n",
    "    if (total[i] > 0): accuracy = correct[i] / total[i]\n",
    "    print('p(pred) is %.13f to %.13f    total = %3d  accuracy = %.3f' % (0 if i==0 else buckets[i-1], buckets[i], total[i], accuracy))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "h-4qQsrrhWA1"
   },
   "source": [
    "**ANSWER: The Bernoulli Naive Bayes model is a weakly calibrated classfier because the accuracy is only 43.3% at 90% posterior probability of the predicted class and the accuracy improves as the posterior probability increases. It is not a strongly calibrated classfier because when the posterior probability is at 100% the accuracy is just above 90%, lower than the posterior probability.**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "jLDISyh4hWA1"
   },
   "source": [
    "### Part 12 EXTRA CREDIT:\n",
    "\n",
    "Design new features to see if you can produce a Bernoulli Naive Bayes model with better performance.  Show the accuracy of a model based on the original features and the accuracy of the model based on the new features.\n",
    "\n",
    "Here are a few ideas to get you started:\n",
    "- Try summing or averaging the pixel values in each row.\n",
    "- Try summing or averaging the pixel values in each column.\n",
    "- Try summing or averaging the pixel values in each square block. (pick various block sizes)\n",
    "- Try counting the number of enclosed regions. (8 usually has 2 enclosed regions, 9 usually has 1, and 7 usually has 0)\n",
    "\n",
    "Notes:\n",
    "* Train on the mini train set (enhanced to comprise the new features).\n",
    "* Evaulate performance on the dev set.\n",
    "* Ensure that your code is well commented."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "-P7h-t2ThWA2"
   },
   "outputs": [],
   "source": [
    "#def P12():\n",
    "\n",
    "### STUDENT START ###\n",
    "\n",
    "\n",
    "### STUDENT END ###\n",
    "\n",
    "#P12()"
   ]
  }
 ],
 "metadata": {
  "colab": {
   "name": "firstname_lastname_p1.ipynb",
   "private_outputs": true,
   "provenance": [
    {
     "file_id": "https://github.com/MIDS-W207/Master/blob/master/Projects/firstname_lastname_p1.ipynb",
     "timestamp": 1557957807607
    }
   ],
   "version": "0.3.2"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": false,
   "sideBar": true,
   "skip_h1_title": true,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
